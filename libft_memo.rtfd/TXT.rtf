{\rtf1\ansi\ansicpg949\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset129 AppleSDGothicNeo-Regular;\f1\fswiss\fcharset0 Helvetica;\f2\fswiss\fcharset0 Helvetica-Bold;
\f3\fswiss\fcharset0 ArialMT;\f4\fnil\fcharset129 AppleSDGothicNeo-Bold;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red26\green26\blue26;\red255\green255\blue255;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c13333\c13333\c13333\c80000;\cssrgb\c100000\c100000\c100000;
}
\paperw12240\paperh15840\vieww16200\viewh13200\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \'a4\'c1\'a4\'a4\'a4\'b1
\f1\fs44 \cf2 < libft.a > 6.29~\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs30 \cf2 \
- 
\f0 \'c0\'fc\'bf\'aa\'ba\'af\'bc\'f6
\f1  
\f0 \'b1\'dd\'c1\'f6
\f1 \
- 
\f0 sub functions : static\'c0\'b8\'b7\'ce define\
- ar \'b8\'ed\'b7\'c9\'be\'ee\'b7\'ce library \'bb\'fd\'bc\'ba (libtool \'b8\'ed\'b7\'c9\'be\'ee \'b1\'dd\'c1\'f6)\
< Part 1 - Libc \'c7\'d4\'bc\'f6\'b5\'e9 \'bb\'fd\'bc\'ba > \
- \'c7\'d4\'bc\'f6\'c0\'cc\'b8\'a7 \'a1\'b0ft_\'a1\'b1\'b7\'ce \'bb\'fd\'bc\'ba (ex. Strlen \uc0\u8212 > ft_strlen)\

\f1\fs22 \cf0 {{\NeXTGraphic Pasted Graphic.png \width10960 \height9740 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\
Memset() - 
\f0 \'b9\'d9\'c0\'cc\'c6\'ae\'b8\'a6
\f1  
\f0 \'b0\'aa\'c0\'b8\'b7\'ce
\f1  
\f0 \'bc\'b3\'c1\'a4
\f1 \

\fs26 void *
\f2\b\fs30 memset
\f1\b0\fs26 (void *b, int c, size_t len) : 
\f0\fs32 \cf3 \cb4 \expnd0\expndtw0\kerning0
\'be\'ee\'b6\'b2
\f3  
\f0 \'b8\'de\'b8\'f0\'b8\'ae\'c0\'c7
\f3  
\f0 \'bd\'c3\'c0\'db\'c1\'a1\'ba\'ce\'c5\'cd
\f3  
\f0 \'bf\'ac\'bc\'d3\'b5\'c8
\f3  
\f0 \'b9\'fc\'c0\'a7\'b8\'a6
\f3  
\f0 \'be\'ee\'b6\'b2
\f3  
\f0 \'b0\'aa\'c0\'b8\'b7\'ce
\f3 (
\f0 \'b9\'d9\'c0\'cc\'c6\'ae
\f3  
\f0 \'b4\'dc\'c0\'a7
\f3 ) 
\f0 \'b8\'f0\'b5\'ce
\f3  
\f0 \'c1\'f6\'c1\'a4\'c7\'cf\'b0\'ed
\f3  
\f0 \'bd\'cd\'c0\'bb
\f3  
\f0 \'b6\'a7
\f3  
\f0 \'bb\'e7\'bf\'eb\'c7\'cf\'b4\'c2
\f3  
\f0 \'c7\'d4\'bc\'f6 <string.h>
\f1\fs26 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\
Len : 
\f0 \'c3\'a4\'bf\'ec\'b0\'ed\'c0\'da
\f1  
\f0 \'c7\'cf\'b4\'c2
\f1  byte
\f0 \'c0\'c7
\f1  
\f0 \'bc\'f6
\f1  (
\f0 \'c3\'a4\'bf\'ec\'b0\'ed\'c0\'da
\f1  
\f0 \'c7\'cf\'b4\'c2
\f1  
\f0 \'b8\'de\'b8\'f0\'b8\'ae\'c0\'c7
\f1  
\f0 \'c5\'a9\'b1\'e2
\f1 )\
c : 
\f0 \'c3\'a4\'bf\'ec\'b0\'ed\'c0\'da
\f1  
\f0 \'c7\'cf\'b4\'c2
\f1  
\f0 \'b0\'aa ((int \'c7\'fc\'c0\'cc\'c1\'f6\'b8\'b8 \'b3\'bb\'ba\'ce\'bf\'a1\'bc\'ad\'b4\'c2 unsigned char(1byte)\'b7\'ce \'ba\'af\'c8\'af\'b5\'c7\'be\'ee \'c0\'fa\'c0\'e5\'b5\'ca)
\f1 \

\f0 B: \'c3\'a4\'bf\'ec\'b0\'ed\'c0\'da \'c7\'cf\'b4\'c2 \'b8\'de\'b8\'f0\'b8\'ae\'c0\'c7 \'bd\'c3\'c0\'db \'c6\'f7\'c0\'ce\'c5\'cd(\'bd\'c3\'c0\'db \'c1\'d6\'bc\'d2)
\f1 \
\
size_t \'97> unsigned int?\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic 1__#$!@%!#__Pasted Graphic.png \width4280 \height960 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\
\'97\'97\'97\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs26 \cf0 \
void 
\f2\b\fs30 bzero
\f1\b0\fs26 (void *s, size_t n) : 
\f0 \'b8\'de\'b8\'f0\'b8\'ae \'b0\'f8\'b0\'a3\'c0\'bb n\'b9\'d9\'c0\'cc\'c6\'ae\'b8\'b8\'c5\'ad 0\'c0\'b8\'b7\'ce \'c3\'a4\'bf\'ee\'b4\'d9 (s \'c1\'d6\'bc\'d2\'b0\'aa\'ba\'ce\'c5\'cd) - \'b8\'de\'b8\'f0\'b8\'ae \'c3\'ca\'b1\'e2\'c8\'ad \'b8\'f1\'c0\'fb memset	\'c7\'cf\'c0\'a7\'c8\'a3\'c8\'af <string.h>\
\

\f1 \'97\'97\'97\
memcpy() - 
\f0 \'b9\'d9\'c0\'cc\'c6\'ae \'ba\'b9\'bb\'e7
\f1 \
Void *
\f2\b\fs30 memcpy
\f1\b0\fs26 (void *restrict dst, const void *restrict src, size_t n) : 
\f0 src\'c0\'c7 n \'b9\'d9\'c0\'cc\'c6\'ae\'b8\'a6 dst\'b7\'ce \'ba\'b9\'bb\'e7, dst\'bf\'a1 \'b4\'eb\'c7\'d1 \'c6\'f7\'c0\'ce\'c5\'cd\'b8\'a6 \'b8\'ae\'c5\'cf\'c7\'d4\
\
Restrict \'c6\'f7\'c0\'ce\'c5\'cd : \'b8\'de\'b8\'f0\'b8\'ae \'c1\'a2\'b1\'d9\'bf\'a1 \'b0\'fc\'b7\'c3\'b5\'c8 \'c3\'d6\'c0\'fb\'c8\'ad \'b1\'e2\'b4\'c9(C99\'c7\'a5\'c1\'d8) - \'b0\'a2 \'c6\'f7\'c0\'ce\'c5\'cd\'b0\'a1 \'bc\'ad\'b7\'ce \'b4\'d9\'b8\'a5 \'b8\'de\'b8\'f0\'b8\'ae \'b0\'f8\'b0\'a3\'c0\'bb \'b0\'a1\'b8\'ae\'c5\'b0\'b0\'ed \'c0\'d6\'b0\'ed, \'b4\'d9\'b8\'a5 \'b0\'f7\'bf\'a1\'bc\'ad \'c1\'a2\'b1\'d9\'c7\'cf\'c1\'f6 \'be\'ca\'c0\'b8\'b4\'cf \'c4\'c4\'c6\'c4\'c0\'cf\'b7\'af\'b0\'a1 \'c3\'d6\'c0\'fb\'c8\'ad\'b8\'a6 \'c7\'cf\'b6\'f3\'b4\'c2 \'b6\'e6\
( \'b0\'b0\'c0\'ba \'b8\'de\'b8\'f0\'b8\'ae \'b0\'f8\'b0\'a3\'c0\'bb \'b0\'a1\'b8\'ae\'c5\'b0\'b4\'c2 \'c6\'f7\'c0\'ce\'c5\'cd\'bf\'a1 restrict \'ba\'d9\'c0\'cc\'b8\'e9 \'c0\'df\'b8\'f8\'b5\'c8 \'b0\'e1\'b0\'fa \'b3\'aa\'bf\'c3 \'bc\'f6 \'c0\'d6\'c0\'b8\'b4\'cf \'c1\'d6\'c0\'c7 )\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 {{\NeXTGraphic 2__#$!@%!#__Pasted Graphic.png \width6860 \height1060 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
dst
\f0 \'bf\'cd
\f1  src
\f0 \'b0\'a1
\f1  
\f0 null \'c6\'f7\'c0\'ce\'c5\'cd\'c0\'cf \'b0\'e6\'bf\'ec \'bf\'b9\'bf\'dc\'c3\'b3\'b8\'ae
\f1 \
\
\'97\'97\'97\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs26 \cf0 \
Void *
\f2\b\fs30 memccpy
\f1\b0\fs26 (void *restrict dst, const void *restrict src, int c, size_t n) : 
\f0 \'b9\'ae\'c0\'da
\f1  c (unsigned char
\f0 \'b7\'ce
\f1  
\f0 \'ba\'af\'c8\'af\'b5\'c8
\f1 ) 
\f0 \'c3\'a3\'c0\'bb
\f1  
\f0 \'b6\'a7\'b1\'ee\'c1\'f6
\f1  src string
\f0 \'c0\'bb dst\'b7\'ce
\f1  copy\

\f0 src\'bf\'a1\'bc\'ad c\'b0\'a1 copy\'b5\'c7\'b8\'e9 copy \'c1\'df\'b4\'dc / n\'b9\'d9\'c0\'cc\'c6\'ae\'b0\'a1 copy\'b5\'c7\'b8\'e9 \'c1\'df\'b4\'dc (\'b5\'d1 \'c1\'df \'b8\'d5\'c0\'fa \'bf\'c0\'b4\'c2 \'b0\'cd\'c0\'b8\'b7\'ce \'c1\'df\'b4\'dc)\
\
\'bc\'ba\'b0\'f8\'c0\'fb\'c0\'cf \'b0\'e6\'bf\'ec : dst\'bf\'a1\'bc\'ad c\'c4\'ab\'c7\'c7\'b5\'c8 \'b4\'d9\'c0\'bd\'c0\'c7 \'c6\'f7\'c0\'ce\'c5\'cd \'b9\'dd\'c8\'af\
Src\'c0\'c7 n\'b9\'d9\'c0\'cc\'c6\'ae \'b1\'ee\'c1\'f6 c\'b0\'a1 \'be\'f8\'c0\'bb \'b0\'e6\'bf\'ec NULL \'c6\'f7\'c0\'ce\'c5\'cd \'b9\'dd\'c8\'af\
\
-------\
\
Void *
\f4\b\fs30 memmove
\f0\b0\fs26 (void *dst, const void *src, size_t len) : src\'b0\'a1 \'b0\'a1\'b8\'ae\'c5\'b0\'b4\'c2 \'b0\'f7\'ba\'ce\'c5\'cd len\'b9\'d9\'c0\'cc\'c6\'ae \'b8\'b8\'c5\'ad\'c0\'bb dst\'b0\'a1 \'b0\'a1\'b8\'ae\'c5\'b0\'b4\'c2 \'b0\'f7\'c0\'b8\'b7\'ce copy. \'b5\'ce string\'c0\'ba \'bf\'c0\'b9\'f6\'b7\'a6\'b5\'c9 \'bc\'f6 \'c0\'d6\'c0\'bd. Non-destructive \'c7\'d1 \'b9\'e6\'b9\'fd\'c0\'b8\'b7\'ce \'c7\'d7\'bb\'f3 copy\'b5\'ca\
= src\'c0\'c7 \'c1\'d6\'bc\'d2\'b0\'a1 dest\'ba\'b8\'b4\'d9 \'c5\'ab \'b0\'aa\'c0\'ce \'b0\'e6\'bf\'ec, \'bf\'c0\'b9\'f6\'b7\'a6\'b5\'c7\'b4\'f5\'b6\'f3\'b5\'b5 src \'b8\'f0\'b5\'ce \'c1\'a4\'bb\'f3\'c0\'fb\'c0\'b8\'b7\'ce dest\'bf\'a1 \'ba\'b9\'bb\'e7. (\'b9\'f6\'c6\'db \'c0\'cc\'bf\'eb\'c7\'cf\'b1\'e2 \'b6\'a7\'b9\'ae)\
= src\'c0\'c7 \'c1\'d6\'bc\'d2\'b0\'a1 dest \'ba\'b8\'b4\'d9 \'c0\'db\'c0\'ba \'b0\'aa\'c0\'cc\'b8\'e9, \'b8\'b6\'c1\'f6\'b8\'b7 \'b5\'a5\'c0\'cc\'c5\'cd\'ba\'ce\'c5\'cd \'c7\'d1\'b9\'d9\'c0\'cc\'c6\'ae\'be\'bf dst\'c0\'c7 \'b8\'b6\'c1\'f6\'b8\'b7 \'b9\'d9\'c0\'cc\'c6\'ae\'ba\'ce\'c5\'cd \'ba\'b9\'bb\'e7.\
\
src\'c0\'c7 \'b3\'ce \'c1\'be\'b7\'e1 \'b9\'ae\'c0\'da \'c8\'ae\'c0\'ce \'be\'c8\'c7\'d4. \'c1\'a4\'c8\'ae\'c8\'f7 len \'b9\'d9\'c0\'cc\'c6\'ae\'b8\'b8\'c5\'ad \'ba\'b9\'bb\'e7 \'bc\'f6\'c7\'e0.\
\'bf\'c0\'b9\'f6\'c7\'c3\'b7\'ce\'bf\'ec \'b9\'e6\'c1\'f6 \'c0\'a7\'c7\'d8 dest\'bf\'cd src\'b0\'a1 \'b0\'a1\'b8\'ae\'c5\'b0\'b4\'c2 \'b9\'e8\'bf\'ad \'b8\'f0\'b5\'ce \'c0\'fb\'be\'ee\'b5\'b5 len \'b9\'d9\'c0\'cc\'c6\'ae \'c0\'cc\'bb\'f3 \'b5\'c7\'be\'ee\'be\'df.\
\

\f1 dst
\f0 \'c0\'c7
\f1  
\f0 \'c6\'f7\'c0\'ce\'c5\'cd \'b8\'ae\'c5\'cf
\f1 \

\f0 \
? Overlap?\
? Dst > src \'c0\'cf \'b0\'e6\'bf\'ec \'b5\'da\'bf\'a1\'bc\'ad\'ba\'ce\'c5\'cd \'b5\'a5\'c0\'cc\'c5\'cd \'ba\'b9\'bb\'e7?\

\f1 \'97\'97\'97\'97\
Void *
\f2\b\fs30 memchr
\f1\b0\fs28 (const void *s, int c, size_t n) :\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0 \cf0 \'ba\'ce\'c8\'a3\'be\'f8\'b4\'c2
\f1  
\f0 \'b9\'ae\'c0\'da\'b7\'ce
\f1  
\f0 \'ba\'af\'c8\'af\'b5\'c8
\f1  c
\f0 \'c0\'c7
\f1  
\f0 \'c3\'b3\'c0\'bd
\f1  
\f0 \'c7\'d7\'b8\'f1\'bf\'a1
\f1  
\f0 \'b4\'eb\'c7\'d8
\f1  
\f0 \'b9\'f6\'c6\'db
\f1 (s)
\f0 \'c0\'c7
\f1  
\f0 \'c3\'b9
\f1  
\f0 \'b9\'f8\'c2\'b0
\f1  n
\f0 \'b9\'d9\'c0\'cc\'c6\'ae\'b8\'a6
\f1  
\f0 \'b0\'cb\'bb\'f6
\f1 \
c
\f0 \'b8\'a6
\f1  
\f0 \'c3\'a3\'b0\'c5\'b3\'aa
\f1  n 
\f0 \'b9\'d9\'c0\'cc\'c6\'ae\'b8\'a6
\f1  
\f0 \'b0\'cb\'bb\'e7\'c7\'d2
\f1  
\f0 \'b6\'a7\'b1\'ee\'c1\'f6
\f1  
\f0 \'b0\'cb\'bb\'f6
\f1  
\f0 \'b0\'e8\'bc\'d3\'c7\'d4
\f1 .
\fs26 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0 \cf0 \'b9\'f6\'c6\'db
\f1 (s)
\f0 \'bf\'a1\'bc\'ad
\f1  c
\f0 \'c0\'c7
\f1  
\f0 \'c0\'a7\'c4\'a1\'bf\'a1
\f1  
\f0 \'b4\'eb\'c7\'d1
\f1  
\f0 \'c6\'f7\'c0\'ce\'c5\'cd
\f1  
\f0 \'b8\'ae\'c5\'cf\
c\'b0\'a1 \'b9\'f6\'c6\'db\'c0\'c7 \'c3\'b9\'b9\'f8\'c2\'b0 n\'b9\'d9\'c0\'cc\'c6\'ae \'b3\'bb\'bf\'a1 \'c0\'d6\'c1\'f6 \'be\'ca\'c0\'ba \'b0\'e6\'bf\'ec NULL \'b8\'ae\'c5\'cf
\f1 \
\
----------\
\
\
Memcmp\
\
Strlen\
\
Strlcpy\
\
Strlcat\
\
\'97\'97\'97\'97\'97\
\
Strchr\
\
Char *strchr(const char *s, int c);\
\

\f0 S\'b0\'a1 \'b0\'a1\'b8\'ae\'c5\'b0\'b4\'c2 string\'bf\'a1\'bc\'ad \'c3\'b9\'b9\'f8\'c2\'b0\'b7\'ce
\f1  
\f0 \'b3\'aa\'bf\'c0\'b4\'c2
\f1  c(char
\f0 \'b7\'ce
\f1  
\f0 \'ba\'af\'c8\'af\'b5\'c8
\f1 ) 
\f0 \'b8\'a6
\f1  
\f0 \'b0\'a1\'b8\'ae\'c5\'b4
\f1 \
(
\f0 \'b8\'b6\'c1\'f6\'b8\'b7
\f1  null
\f0 \'b9\'ae\'c0\'da\'b5\'b5
\f1  string
\f0 \'c0\'c7
\f1  
\f0 \'c0\'cf\'ba\'ce\'b7\'ce
\f1  
\f0 \'bb\'fd\'b0\'a2\'b5\'c7\'be\'ee \'b8\'b8\'be\'e0 c = \'a1\'ae\\0\'a1\'af\'c0\'cc\'b8\'e9 \'a1\'ae\\0\'a1\'af\'b8\'a6 \'b0\'a1\'b8\'ae\'c5\'b0\'b4\'c2 \'c6\'f7\'c0\'ce\'c5\'cd \'b9\'dd\'c8\'af)\
\
c\'b8\'a6 \'b0\'a1\'b8\'ae\'c5\'b0\'b4\'c2 \'c6\'f7\'c0\'ce\'c5\'cd \'b9\'dd\'c8\'af\
c\'b0\'a1 string\'bf\'a1 \'b3\'aa\'c5\'b8\'b3\'aa\'c1\'f6 \'be\'ca\'c0\'bb \'b0\'e6\'bf\'ec NULL \'b9\'dd\'c8\'af
\f1 \
\
\'97\'97\'97\'97\'97\
\
Strrchr\
\
Char *strrchr(const char *s, int c)\
\
strchr
\f0 \'bf\'cd
\f1  
\f0 \'b0\'b0\'c1\'f6\'b8\'b8
\f1 , 
\f0 \'b0\'a1\'c0\'e5
\f1  
\f0 \'b8\'b6\'c1\'f6\'b8\'b7\'bf\'a1
\f1  
\f0 \'b3\'aa\'c5\'b8\'b3\'ad
\f1  c
\f0 \'b8\'a6 \'b0\'a1\'b8\'ae\'c5\'b0\'b4\'c2 \'c6\'f7\'c0\'ce\'c5\'cd \'b9\'dd\'c8\'af
\f1 \
\
\'97\'97\'97\'97\'97\'97\
\
Strnstr\
\
Char	*strnstr(const char *haystack, const char *needle, size_t Len);\
\
Haystack 
\f0 \'bd\'ba\'c6\'ae\'b8\'b5 \'be\'c8\'bf\'a1\'bc\'ad (null\'b7\'ce \'b3\'a1\'b3\'aa\'b4\'c2) needle \'bd\'ba\'c6\'ae\'b8\'b5\'c0\'bb \'b0\'cb\'bb\'f6 (Len \'b9\'d9\'c0\'cc\'c6\'ae\'b1\'ee\'c1\'f6)
\f1 \
\'91\\0\'92 
\f0 \'c0\'cc\'c8\'c4\'bf\'a1 \'bf\'c0\'b4\'c2 \'c4\'b3\'b8\'af\'c5\'cd\'b4\'c2 \'b0\'cb\'bb\'f6\'b5\'c7\'c1\'f6 \'be\'ca\'c0\'bd.
\f1 \
\
*Since the strnstr() function is a FreeBSD specific API, it should only be used when portability is not a concern.\
\
< 
\f0 Part 2 - \'c3\'df\'b0\'a1 \'c7\'d4\'bc\'f6\'b5\'e9>
\f1\fs20 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs30 \cf0 ft_ substr / ft_strjoin / ft_strtrim / ft_split / ft_itoa / ft_strmapi / ft_putchar_fd / ft_putstr_fd / ft_putendl_fd\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs26 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs28 \cf0 < Bonus part >\
- libft.h \'c7\'ec\'b4\'f5\'c6\'c4\'c0\'cf\'bf\'a1 \'b1\'b8\'c1\'b6\'c3\'bc \'c3\'df\'b0\'a1\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs24 \cf0    
\fs28 {{\NeXTGraphic Pasted Graphic 2.png \width3460 \height1560 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0 \cf0 content: void *\'b7\'ce \'be\'ee\'b6\'b2 \'c5\'b8\'c0\'d4\'c0\'c7 \'b5\'a5\'c0\'cc\'c5\'cd\'b5\'e7 \'c0\'fa\'c0\'e5 \
next: \'b4\'d9\'c0\'bd element \'c0\'c7 \'c1\'d6\'bc\'d2 (\'b8\'b6\'c1\'f6\'b8\'b7 element\'c0\'cf \'b0\'e6\'bf\'ec NULL) 
\fs28 \
- make bonus \'b8\'ed\'b7\'c9\'be\'ee\'b7\'ce libft.a \'b6\'f3\'c0\'cc\'ba\'ea\'b7\'af\'b8\'ae\'bf\'a1 \'ba\'b8\'b3\'ca\'bd\'ba \'c7\'d4\'bc\'f6 \'c3\'df\'b0\'a1\'b5\'c7\'b0\'d4\
- .c \'c6\'c4\'c0\'cf\'b0\'fa \'c7\'ec\'b4\'f5\'bf\'a1 _bonus \'c3\'df\'b0\'a1\'c7\'d2 \'c7\'ca\'bf\'e4 x. (\'ba\'b8\'b3\'ca\'bd\'ba \'c7\'d4\'bc\'f6\'b5\'e9 \'c0\'d6\'b4\'c2 \'c6\'c4\'c0\'cf\'b5\'e9\'bf\'a1\'b8\'b8 \'c3\'df\'b0\'a1)\
- ft_1stnew / ft_1stadd_front / ft_1stsize / ft_1stlast / ft_1stadd_back / ft_1stdelone / ft_1stclear / ft_1stiter / ft_1stmap\
\
}